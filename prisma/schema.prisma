// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  encryptedPassword     String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  restaurants           Restaurant[]
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwofactorToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Restaurant {
  id           String @id @default(cuid())
  restaurantId String @unique
  fullName     String
  ClientName   String
  branchName   String @unique

  address String
  pinCode String
  city    String
  state   String
  country String
  upiId   String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  Category Category[]
  Menu     Menu[]
}

enum MenuType {
  Vegeterian
  nonVegeterian
}

enum Availability {
  Available
  notAvailable
}

model Menu {
  id           String       @id @default(cuid())
  menuId       String       @unique
  name         String
  description  String
  type         MenuType
  image        String[]
  category     String
  amount       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isFeatured   Boolean?     @default(false)
  availability Availability

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(cuid())
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}
